import numpy as np
import pprint as pp


"""
1 : {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 28, 37, 46, 55, 64, 73}
2 : {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 29, 38, 47, 56, 65, 74}
3 : {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 30, 39, 48, 57, 66, 75}
4 : {1, 2, 3, 5, 6, 7, 8, 9, 13, 14, 15, 22, 23, 24, 31, 40, 49, 58, 67, 76}
5 : {1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 15, 22, 23, 24, 32, 41, 50, 59, 68, 77}
6 : {1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 22, 23, 24, 33, 42, 51, 60, 69, 78}
7 : {1, 2, 3, 4, 5, 6, 8, 9, 16, 17, 18, 25, 26, 27, 34, 43, 52, 61, 70, 79}
8 : {1, 2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 25, 26, 27, 35, 44, 53, 62, 71, 80}
9 : {1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 25, 26, 27, 36, 45, 54, 63, 72, 81}
10 : {1, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 37, 46, 55, 64, 73}
11 : {1, 2, 3, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 38, 47, 56, 65, 74}
12 : {1, 2, 3, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 39, 48, 57, 66, 75}
13 : {4, 5, 6, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 31, 40, 49, 58, 67, 76}
14 : {4, 5, 6, 10, 11, 12, 13, 15, 16, 17, 18, 22, 23, 24, 32, 41, 50, 59, 68, 77}
15 : {4, 5, 6, 10, 11, 12, 13, 14, 16, 17, 18, 22, 23, 24, 33, 42, 51, 60, 69, 78}
16 : {7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 25, 26, 27, 34, 43, 52, 61, 70, 79}
17 : {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 25, 26, 27, 35, 44, 53, 62, 71, 80}
18 : {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 26, 27, 36, 45, 54, 63, 72, 81}
19 : {1, 2, 3, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 37, 46, 55, 64, 73}
20 : {1, 2, 3, 10, 11, 12, 19, 21, 22, 23, 24, 25, 26, 27, 29, 38, 47, 56, 65, 74}
21 : {1, 2, 3, 10, 11, 12, 19, 20, 22, 23, 24, 25, 26, 27, 30, 39, 48, 57, 66, 75}
22 : {4, 5, 6, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 27, 31, 40, 49, 58, 67, 76}
23 : {4, 5, 6, 13, 14, 15, 19, 20, 21, 22, 24, 25, 26, 27, 32, 41, 50, 59, 68, 77}
24 : {4, 5, 6, 13, 14, 15, 19, 20, 21, 22, 23, 25, 26, 27, 33, 42, 51, 60, 69, 78}
25 : {7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 34, 43, 52, 61, 70, 79}
26 : {7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 44, 53, 62, 71, 80}
27 : {7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 36, 45, 54, 63, 72, 81}
28 : {1, 10, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 55, 64, 73}
29 : {2, 11, 20, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 56, 65, 74}
30 : {3, 12, 21, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 57, 66, 75}
31 : {4, 13, 22, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 49, 50, 51, 58, 67, 76}
32 : {5, 14, 23, 28, 29, 30, 31, 33, 34, 35, 36, 40, 41, 42, 49, 50, 51, 59, 68, 77}
33 : {6, 15, 24, 28, 29, 30, 31, 32, 34, 35, 36, 40, 41, 42, 49, 50, 51, 60, 69, 78}
34 : {7, 16, 25, 28, 29, 30, 31, 32, 33, 35, 36, 43, 44, 45, 52, 53, 54, 61, 70, 79}
35 : {8, 17, 26, 28, 29, 30, 31, 32, 33, 34, 36, 43, 44, 45, 52, 53, 54, 62, 71, 80}
36 : {9, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 45, 52, 53, 54, 63, 72, 81}
37 : {1, 10, 19, 28, 29, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 64, 73}
38 : {2, 11, 20, 28, 29, 30, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 65, 74}
39 : {3, 12, 21, 28, 29, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 66, 75}
40 : {4, 13, 22, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 51, 58, 67, 76}
41 : {5, 14, 23, 31, 32, 33, 37, 38, 39, 40, 42, 43, 44, 45, 49, 50, 51, 59, 68, 77}
42 : {6, 15, 24, 31, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 60, 69, 78}
43 : {7, 16, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 52, 53, 54, 61, 70, 79}
44 : {8, 17, 26, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 52, 53, 54, 62, 71, 80}
45 : {9, 18, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52, 53, 54, 63, 72, 81}
46 : {1, 10, 19, 28, 29, 30, 37, 38, 39, 47, 48, 49, 50, 51, 52, 53, 54, 55, 64, 73}
47 : {2, 11, 20, 28, 29, 30, 37, 38, 39, 46, 48, 49, 50, 51, 52, 53, 54, 56, 65, 74}
48 : {3, 12, 21, 28, 29, 30, 37, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 66, 75}
49 : {4, 13, 22, 31, 32, 33, 40, 41, 42, 46, 47, 48, 50, 51, 52, 53, 54, 58, 67, 76}
50 : {5, 14, 23, 31, 32, 33, 40, 41, 42, 46, 47, 48, 49, 51, 52, 53, 54, 59, 68, 77}
51 : {6, 15, 24, 31, 32, 33, 40, 41, 42, 46, 47, 48, 49, 50, 52, 53, 54, 60, 69, 78}
52 : {7, 16, 25, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 61, 70, 79}
53 : {8, 17, 26, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 62, 71, 80}
54 : {9, 18, 27, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 63, 72, 81}
55 : {1, 10, 19, 28, 37, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75}
56 : {2, 11, 20, 29, 38, 47, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75}
57 : {3, 12, 21, 30, 39, 48, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75}
58 : {4, 13, 22, 31, 40, 49, 55, 56, 57, 59, 60, 61, 62, 63, 67, 68, 69, 76, 77, 78}
59 : {5, 14, 23, 32, 41, 50, 55, 56, 57, 58, 60, 61, 62, 63, 67, 68, 69, 76, 77, 78}
60 : {6, 15, 24, 33, 42, 51, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 69, 76, 77, 78}
61 : {7, 16, 25, 34, 43, 52, 55, 56, 57, 58, 59, 60, 62, 63, 70, 71, 72, 79, 80, 81}
62 : {8, 17, 26, 35, 44, 53, 55, 56, 57, 58, 59, 60, 61, 63, 70, 71, 72, 79, 80, 81}
63 : {9, 18, 27, 36, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 72, 79, 80, 81}
64 : {1, 10, 19, 28, 37, 46, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75}
65 : {2, 11, 20, 29, 38, 47, 55, 56, 57, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75}
66 : {3, 12, 21, 30, 39, 48, 55, 56, 57, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75}
67 : {4, 13, 22, 31, 40, 49, 58, 59, 60, 64, 65, 66, 68, 69, 70, 71, 72, 76, 77, 78}
68 : {5, 14, 23, 32, 41, 50, 58, 59, 60, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78}
69 : {6, 15, 24, 33, 42, 51, 58, 59, 60, 64, 65, 66, 67, 68, 70, 71, 72, 76, 77, 78}
70 : {7, 16, 25, 34, 43, 52, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 79, 80, 81}
71 : {8, 17, 26, 35, 44, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 79, 80, 81}
72 : {9, 18, 27, 36, 45, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81}
73 : {1, 10, 19, 28, 37, 46, 55, 56, 57, 64, 65, 66, 74, 75, 76, 77, 78, 79, 80, 81}
74 : {2, 11, 20, 29, 38, 47, 55, 56, 57, 64, 65, 66, 73, 75, 76, 77, 78, 79, 80, 81}
75 : {3, 12, 21, 30, 39, 48, 55, 56, 57, 64, 65, 66, 73, 74, 76, 77, 78, 79, 80, 81}
76 : {4, 13, 22, 31, 40, 49, 58, 59, 60, 67, 68, 69, 73, 74, 75, 77, 78, 79, 80, 81}
77 : {5, 14, 23, 32, 41, 50, 58, 59, 60, 67, 68, 69, 73, 74, 75, 76, 78, 79, 80, 81}
78 : {6, 15, 24, 33, 42, 51, 58, 59, 60, 67, 68, 69, 73, 74, 75, 76, 77, 79, 80, 81}
79 : {7, 16, 25, 34, 43, 52, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81}
80 : {8, 17, 26, 35, 44, 53, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81}
81 : {9, 18, 27, 36, 45, 54, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80}
"""
class ConstraintBuilder:

    def __init__(self, print_it=False):
        tableau = np.arange(1, 82).reshape(9, 9)

        self.contraintes = {}
        for index_l, l in enumerate(tableau, start=1):
            for index_c, no_case in enumerate(l, start=1):
                contraintes_de_carre = set(l)
                contraintes_de_carre.update(tableau[:, index_c - 1])
                if index_l in (1, 2, 3):
                    if index_c in (1, 2, 3):
                        contraintes_de_carre.update(*tableau[0:3, 0:3])
                    elif index_c in (4, 5, 6):
                        contraintes_de_carre.update(*tableau[0:3, 3:6])
                    else:
                        contraintes_de_carre.update(*tableau[0:3, 6:9])
                elif index_l in (4, 5, 6):
                    if index_c in (1, 2, 3):
                        contraintes_de_carre.update(*tableau[3:6, 0:3])
                    elif index_c in (4, 5, 6):
                        contraintes_de_carre.update(*tableau[3:6, 3:6])
                    else:
                        contraintes_de_carre.update(*tableau[3:6, 6:9])
                else:
                    if index_c in (1, 2, 3):
                        contraintes_de_carre.update(*tableau[6:9, 0:3])
                    elif index_c in (4, 5, 6):
                        contraintes_de_carre.update(*tableau[6:9, 3:6])
                    else:
                        contraintes_de_carre.update(*tableau[6:9, 6:9])
                contraintes_de_carre.remove(no_case)
                li = list(contraintes_de_carre)
                li.sort()
                self.contraintes[no_case] = contraintes_de_carre

                if print_it:
                    print(f'{no_case} : {contraintes_de_carre}')
